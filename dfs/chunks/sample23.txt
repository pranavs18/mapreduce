15.	    public static class Map extends MapReduceBase implements Mapper<LongWritable, Text, Text, IntWritable> {
16.	
17.	      static enum Counters { INPUT_WORDS }
18.	
19.	      private final static IntWritable one = new IntWritable(1);
20.	      private Text word = new Text();
21.	
22.	      private boolean caseSensitive = true;
23.	      private Set<String> patternsToSkip = new HashSet<String>();
24.	
25.	      private long numRecords = 0;
26.	      private String inputFile;
27.	
28.	      public void configure(JobConf job) {
29.	        caseSensitive = job.getBoolean("wordcount.case.sensitive", true);
30.	        inputFile = job.get("map.input.file");
31.	
32.	        if (job.getBoolean("wordcount.skip.patterns", false)) {
33.	          Path[] patternsFiles = new Path[0];
34.	          try {
35.	            patternsFiles = DistributedCache.getLocalCacheFiles(job);
36.	          } catch (IOException ioe) {
37.	            System.err.println("Caught exception while getting cached files: " + StringUtils.stringifyException(ioe));
38.	          }
39.	          for (Path patternsFile : patternsFiles) {
40.	            parseSkipFile(patternsFile);
41.	          }
42.	        }
43.	      }
44.	
45.	      private void parseSkipFile(Path patternsFile) {
46.	        try {
47.	          BufferedReader fis = new BufferedReader(new FileReader(patternsFile.toString()));
48.	          String pattern = null;
49.	          while ((pattern = fis.readLine()) != null) {
50.	            patternsToSkip.add(pattern);
51.	          }
52.	        } catch (IOException ioe) {
53.	          System.err.println("Caught exception while parsing the cached file '" + patternsFile + "' : " + StringUtils.stringifyException(ioe));
54.	        }
55.	      }
56.	
57.	      public void map(LongWritable key, Text value, OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException {
58.	        String line = (caseSensitive) ? value.toString() : value.toString().toLowerCase();
59.	
60.	        for (String pattern : patternsToSkip) {
61.	          line = line.replaceAll(pattern, "");
62.	        }
63.	
64.	        StringTokenizer tokenizer = new StringTokenizer(line);
