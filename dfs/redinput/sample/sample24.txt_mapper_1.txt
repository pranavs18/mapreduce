% 1
% 1
("-skip".equals(args[i])) 1
("-skip".equals(args[i])) 1
(int 1
(int 1
(values.hasNext()) 1
(values.hasNext()) 1
+ 1
+ 1
+ 1
+ 1
+ 1
+ 1
+ 1
+ 1
0) 1
0) 1
0; 1
0; 1
1); 1
1); 1
100. 1
100. 1
102. 1
102. 1
104. 1
104. 1
106. 1
106. 1
108. 1
108. 1
111. 1
111. 1
113. 1
113. 1
65. 1
65. 1
67. 1
67. 1
69. 1
69. 1
70. 1
70. 1
72. 1
72. 1
74. 1
74. 1
76. 1
76. 1
78. 1
78. 1
81. 1
81. 1
83. 1
83. 1
85. 1
85. 1
87. 1
87. 1
89. 1
89. 1
90. 1
90. 1
92. 1
92. 1
94. 1
94. 1
96. 1
96. 1
98. 1
98. 1
= 1
= 1
= 1
= 1
= 1
= 1
Exception 1
Exception 1
FileInputFormat.setInputPaths(conf, 1
FileInputFormat.setInputPaths(conf, 1
IOException 1
IOException 1
IntWritable(sum)); 1
IntWritable(sum)); 1
IntWritable, 1
IntWritable, 1
IntWritable> 1
IntWritable> 1
IntWritable> 1
IntWritable> 1
Iterator<IntWritable> 1
Iterator<IntWritable> 1
JobConf 1
JobConf 1
List<String> 1
List<String> 1
MapReduceBase 1
MapReduceBase 1
OutputCollector<Text, 1
OutputCollector<Text, 1
Path(other_args.get(0))); 1
Path(other_args.get(0))); 1
Reducer<Text, 1
Reducer<Text, 1
Reporter 1
Reporter 1
Text, 1
Text, 1
WordCount.class); 1
WordCount.class); 1
conf.setBoolean("wordcount.skip.patterns", 1
conf.setBoolean("wordcount.skip.patterns", 1
conf.setCombinerClass(Reduce.class); 1
conf.setCombinerClass(Reduce.class); 1
conf.setInputFormat(TextInputFormat.class); 1
conf.setInputFormat(TextInputFormat.class); 1
conf.setJobName("wordcount"); 1
conf.setJobName("wordcount"); 1
conf.setMapperClass(Map.class); 1
conf.setMapperClass(Map.class); 1
conf.setOutputFormat(TextOutputFormat.class); 1
conf.setOutputFormat(TextOutputFormat.class); 1
conf.setOutputKeyClass(Text.class); 1
conf.setOutputKeyClass(Text.class); 1
conf.setOutputValueClass(IntWritable.class); 1
conf.setOutputValueClass(IntWritable.class); 1
else 1
else 1
extends 1
extends 1
for 1
for 1
i 1
i 1
i=0; 1
i=0; 1
if 1
if 1
if 1
if 1
int 1
int 1
int 1
int 1
key, 1
key, 1
other_args.add(args[i]); 1
other_args.add(args[i]); 1
output, 1
output, 1
output.collect(word, 1
output.collect(word, 1
processing 1
processing 1
public 1
public 1
public 1
public 1
public 1
public 1
reduce(Text 1
reduce(Text 1
reporter.setStatus("Finished 1
reporter.setStatus("Finished 1
sum 1
sum 1
sum 1
sum 1
the 1
the 1
throws 1
throws 1
throws 1
throws 1
while 1
while 1
while 1
while 1
{ 1
{ 1
{ 1
{ 1
{ 1
{ 1
{ 1
{ 1
{ 1
{ 1
{ 1
{ 1
{ 1
{ 1
{ 1
{ 1
{ 1
{ 1
} 1
} 1
} 1
} 1
} 1
} 1
} 1
} 1
} 1
} 1
} 1
} 1
} 1
} 1
} 1
} 1
} 1
} 1
} 1
} 1
